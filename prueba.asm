;Archivo: prueba.cpp
;Fecha 08/11/2022 07:32:52 p. m.
#make_COM#
Include 'emu8086.inc'
ORG 100h

;Variables: 
	area
DD ?
	radio
DD ?
	pi
DD ?
	resultado
DD ?
	a
DW ?
	d
DW ?
	altura
DW ?
	cinco
DW ?
	x
DD ?
	y
DB ?
	i
DW ?
	j
DW ?
	k
DW ?
PRINTN "Introduce la altura de la piramide: "
CALL scan_num
MOV altura, CX
MOV AX, 2
PUSH AX
POP AX
POP BX
CMP AX; BX
JLE if1
inicioFor0:
POP AX
MOViAX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JLE 
MOV AX, 1
PUSH AX
PRINTN "hola"
MOV AX, 0
PUSH AX
POP AX
MOVjAX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if2
PRINTN "*"
JMP else2
if2:
PRINTN "-"
else2:
MOV AX, 1
PUSH AX
PRINTN "
"
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JLE 
MOV AX, 1
PUSH AX
PRINTN "hola"
MOV AX, 0
PUSH AX
POP AX
MOVjAX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if3
PRINTN "*"
JMP else3
if3:
PRINTN "-"
else3:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if4
PRINTN "*"
JMP else4
if4:
PRINTN "-"
else4:
MOV AX, 1
PUSH AX
PRINTN "
"
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JLE 
MOV AX, 1
PUSH AX
PRINTN "hola"
MOV AX, 0
PUSH AX
POP AX
MOVjAX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if5
PRINTN "*"
JMP else5
if5:
PRINTN "-"
else5:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if6
PRINTN "*"
JMP else6
if6:
PRINTN "-"
else6:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if7
PRINTN "*"
JMP else7
if7:
PRINTN "-"
else7:
MOV AX, 1
PUSH AX
PRINTN "
"
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JLE 
MOV AX, 1
PUSH AX
PRINTN "hola"
MOV AX, 0
PUSH AX
POP AX
MOVjAX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if8
PRINTN "*"
JMP else8
if8:
PRINTN "-"
else8:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if9
PRINTN "*"
JMP else9
if9:
PRINTN "-"
else9:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if10
PRINTN "*"
JMP else10
if10:
PRINTN "-"
else10:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if11
PRINTN "*"
JMP else11
if11:
PRINTN "-"
else11:
MOV AX, 1
PUSH AX
PRINTN "
"
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JLE 
MOV AX, 1
PUSH AX
PRINTN "hola"
MOV AX, 0
PUSH AX
POP AX
MOVjAX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if12
PRINTN "*"
JMP else12
if12:
PRINTN "-"
else12:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if13
PRINTN "*"
JMP else13
if13:
PRINTN "-"
else13:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if14
PRINTN "*"
JMP else14
if14:
PRINTN "-"
else14:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if15
PRINTN "*"
JMP else15
if15:
PRINTN "-"
else15:
MOV AX, 1
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if16
PRINTN "*"
JMP else16
if16:
PRINTN "-"
else16:
MOV AX, 1
PUSH AX
PRINTN "
"
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JLE 
MOV AX, 1
PUSH AX
PRINTN "hola"
MOV AX, 0
PUSH AX
POP AX
MOVjAX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if17
PRINTN "*"
JMP else17
if17:
PRINTN "-"
else17:
MOV AX, 1
PUSH AX
PRINTN "
"
finFor0:
MOV AX, 0
PUSH AX
POP AX
MOVkAX
PRINTN "//"
MOV AX, 2
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
PRINTN "//"
MOV AX, 2
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
PRINTN "//"
MOV AX, 2
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
PRINTN "//"
MOV AX, 2
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
PRINTN "//"
MOV AX, 2
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX; BX
JGE 
PRINTN "
"
JMP else1
if1:
PRINTN "
Error: la altura debe de ser mayor que 2
"
else1:
MOV AX, 1
PUSH AX
MOV AX, 1
PUSH AX
POP AX
POP BX
CMP AX; BX
JE if18
PRINTN "Esto no se debe imprimir"
MOV AX, 2
PUSH AX
MOV AX, 2
PUSH AX
POP AX
POP BX
CMP AX; BX
JNE if19
PRINTN "Esto tampoco"
JMP else19
if19:
else19:
JMP else18
if18:
else18:
MOV AX, 258
PUSH AX
POP AX
MOVaAX
PRINTN "Valor de variable int 'a' antes del casteo: "
POP AX
POP AX
POP AX
MOV AH, 0
MOVyAX
PRINTN "
Valor de variable char 'y' despues del casteo de a: "
POP AX
PRINTN "
A continuacion se intenta asignar un int a un char sin usar casteo: 
"
RET
DEFINE_SCAN_NUM
DEFINE_PRINT_NUM
DEFINE_PRINT_NUM_UNS
END
